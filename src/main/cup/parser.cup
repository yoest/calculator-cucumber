import java_cup.runtime.Symbol;
import java.util.Vector;

import calculator.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

parser code {:
:}

terminal LPAREN, RPAREN;
terminal TIMES;
terminal PLUS;
terminal MINUS;
terminal DIVIDE;
terminal MODULO;
terminal INVERSEMODULO;
terminal String NUMBER;

non terminal Expression expr;
non terminal Expression multiply_expr;
non terminal Expression term;
non terminal Expression factor;

precedence left TIMES, DIVIDE;


expr ::= expr:e1 PLUS term:t1 {:
            List<Expression> params = new ArrayList<>();
            Collections.addAll(params, e1, t1);
            RESULT = new Plus(params, Notation.INFIX); :}
       | expr:e1 MINUS term:t1 {:
             List<Expression> params = new ArrayList<>();
             Collections.addAll(params, e1, t1);
             RESULT = new Minus(params, Notation.INFIX); :}
       | term:t1 {:
             RESULT = t1; :};

term ::= term:t1 TIMES factor:f1 {:
            List<Expression> params = new ArrayList<>();
            Collections.addAll(params, t1, f1);
            RESULT = new Times(params, Notation.INFIX); :}
       | term:t1 DIVIDE factor:f1 {:
            List<Expression> params = new ArrayList<>();
            Collections.addAll(params, t1, f1);
            RESULT = new Divides(params, Notation.INFIX); :}
       | factor:f1 {:
            RESULT = f1; :};

factor ::= NUMBER:n  {:
            RESULT = new MyNumber(n, 10); :}
          | LPAREN expr:e RPAREN {:
            RESULT = e; :};
